1. Creating a server through nodejs
-we executed that file (serverNodeStart/app.js) with node js
-it started a script where node.js went through the entire file
-it parsed the code
- registered the variables and functions and so on

2. Core module (http, https, fs, path, os)
3. Request listener isa function that will execute for every incoming request
4.Event loop process is a process managed by node.js which keeps on running as long as there is work to do
-as long as there are event listeners registered and one event listener we did register
-and we never unregistered ,is that imcoming request listener we passed or we set up with the help of create server
-we passed a function to create server
-that is basically an ongoing event listener, one we didnt unregister from and we shouldnt because our server should of course stau up

4. Our core node application basically is managed by this event loop, all our code is managed by this
-node.js uses event driven approach for all kinds of stuff
- not just for managing a server

3. webserver that does different things depending on which route we enter
- Load a page where USER can enter some data which will be stored in a file on the server once it is sent
-We can do that by 1st passing the url. Store it in a new constant
-Do it by accessing  request url (req.url) example (/test)
-Add if statement , and check if the url is equal to just slash and only this will match .That is: if(url === '/'){}
-inside the block curly bracket write the html with the head, title,body, form,button, add action in your form tag (action='/message')
- When we click on SEND button, we send a Post request to (/message) but we are not doing that in our previous code

4.Single Thread, Event Loop, Blocking Code
-In our Node.js application we have our code
-Node.js uses only one single JS thread (a thread is basically alike a process in your operating system)
-So it uses that one thread so the question is how does it able to handle multiple request because
-if we are not able to assign a new thread for each request, they ultimately end up all or all running in one on the same thread
-these poses security question.
-can you then acess data from request A, from request B, at the same time when performance is a matter of concern
-doesnt it not mean if request A, is still doing work, request B cant be handled..? both is taken care of in Node.js
- We look at Performance now and security later
-Let say we have a code which access a File system as we have already written in thise course
-Working with files is a task that takes longer because files can be very big and it doesnt necessairly complete instantly
-therefore if doing this upon incoming request, a second request might have to wait because we are not able to handle it yet or even gets declined,
  so basically our webpage is down for that user.
- We will use a construct called (Event Loop), THIS EVENT LOOP will automatically be started by Node.Js WHEN YOUR PROGRAM START , you dont do that explixitly by yourself
-This is responsible for handling event callback
-Even Loop basically handles callbacks that contain fast finishing code
- Couple of long taking operations are sent to a WORKER POOL which is managed by Node.js automatically.
-WORKER POOL is responsible for heavy lifting. And it is kind of detached of your JS code ( it runs differently)
- it can spin up multiple threads, it closely intervened with your operating system you are running the app on.
-If you are doing something with a file where a WORKER from that pool will take care and will do its job totally detached from your code
 and from the request and from the event loop. The one connection to the loop once the WORKER IS DONE.
-Example  once we read a file, it will trigger the callback for that read file operation, and since event loop is responsible for the events
 and callbacks,this will in endup in the event loop. There Nose.js will execute the appropriate callback

- To solve this, at the beginning of each loop of each new iteration it checks if there are any timer callbacks it should execute.
-basically there is a (set timeout) and (set interval) ,which is common from front-end JS which has this methods
-In Node.js you set Timer, always pass a method, a function that it should execute when the timer is complete.
-Example: if we have WRITE or READ file, we might have a call because that operation finished and will then execute these callbacks
-IO means Input and Output operation which is a FILE OPERATIONS or network operation. Or generally blocking long takong operation.
-When there are too many outstanding callbacks it will continue it loop iteration and postpone these callbacks to the next iteration to execute them
-After working on these open callbacks and finishing them all it enters the POOL PHASE .The pool phase is where Node.js will look for
  new IO events events and do its best to execute it callback if possible or register it as a pending callback.
-it also check if there are any timer callbacks due to be executed ,if that is the case it will jump to that TIMER phase and execute them rightaway
-and it can jump back there and not finish the iteration otherwise continue.
- and next set immediate callbacks will be executed in a socalled check PHASE. SET IMMEDIATE is a bit like SET TIME OUT OR SET INTERVAL, just THAT
 it will execute immediately but always after any open callbacks have been executed
************************************************************************************************************************************************************
PRACTICAL EXAMPLE BELOW


const http = require('http');
const fs = require('fs');//allows us to with with file system

const server = http.createServer(function (req, res) {

    //console.log(req)
    //console.log(req.url, req.method, req.headers);

    const url = req.url;
    const method = req.method;
    if(url === '/'){
        res.setHeader('content-Type','text/html');
        res.write(`<html>`)
        res.write(`<head><title>Enter Message</title></head>`)
        res.write(`<body><h1><form action="/message" method="POST"><input type="text" name="message"><button type="button">Send</button></form></h1></body>`)
        res.write(`</html>`)

        return res.end();
    }
    /*
    * The condition below is to ensure we handle POST request and not GET
    * We enter into this consition if we have POST request to /message which has been created for the form
    * We want to redirect the USER back  to slash nothing. Not to leave USER on /message
    * create a new file and store the message the user entered in it
    * */
    if(url === '/message' && method === 'POST' ){
        const body = [];
        req.on('data', (chunk)=>{//on method allows us to listen to data event
            console.log(chunk)
            body.push(chunk);

        });
        /*
        * Understand that the (request on) or code like (http create server) are some examples Node.js uses a pattern
        * where you pass a function to a function and Node will execute these passed functions later point in time which we call asynchronously
        * Note, it is not always the case that a passed in function execute later time
        * In a case of async node wont immediately run that function instead when it encounters the (request on) line below it simply
        * add new event listener internally and manages the even listeners internally .
        * For the (end event) on the request which will be triggered automatically once Node.js is done passing the request .This is what NODE.JS does.
        * It will then call the (end request) function for you. It is like Node.js having internal registry of event and listeners to these events
        * And a function like (req.on) (end) is a listener.
        * So when Node.js is done passing the request it will go through the registry and see if it's done witht the request and then send the
        * (end) event
        * As the (return res.end()) is moved into the call-back function, the flow is as below
        * - It will reach the IF-STATEMENT , and if condtion are are met it will go inside of it
        * -It will then register the two handlers (reg.on('data')) and (req.on('end')) and not immediately execute the two functions handlers
        * -instead the functions are registered internally in its event emitter registry
        * -and then it will jump to the next line (res.setHeader .....) ..so when the server is restart
        * -With the (status code) moved inside the call-back function, it will let the status not to be passed immediately
        * -when you restart the server and pass a value as a request from the web browser form.
        * -Because Node.js will not execute the call-back function rightaway and therefore thr (return res-end()) statement will not quit the
        * - entire condition it finds itself , instead it just registers this call-back and immediately moves onto the next lines
        * -and eventually execute the call-back at a time it will be too late and that will not let the header to be set.
        * -Because it has executed the (res-setHeader) and parsing of the request is finished and executed the code and again tried to send a response
        * -which will be too late
        * -To avoid this from happening apply return on req.on('end')
        * -which will prevent the res.setHeader from executed again .
        *writeFileSync - the sync means synchronous which is a special method which blocks code execution until this file is created
        * -working with files is available in two modes (synchronous Mode) to block execution of next line of code until file is done
        * - The next line which is short text entered is super fast
        * -assuming of huge files (couple of hundreds of megabytes) it will mean everything has to be read till done before you move to next line of code
        * -new incoming request wont be done until that operation is done . There using (Sync) for writeFile shouldnt be entertained .Use it (writeFileSync) when you have short operation
        * -Use (writeFile) which does not only accept (path & data) but also accept third argument like a call back. that is a function which has to be executed when done
        * -(Example: fs.writeFile('message.txt', 'you are great', ()=>{}). the call back receives an (err) object which will be null if no error occurs
        *
        * */
        return req.on('end', ()=>{//this will be fired onw its done parsing the incoming request data

            const parseBody = Buffer.concat(body).toString();
            //console.log(parseBody);
            const message = parseBody.split('=')[1];
            fs.writeFileSync('message.txt', message, ()=>{
                /*fs.writeFileSync('message.txt','JOY GHANA');*/
                res.statusCode = 302;
                res.setHeader('Location', '/');
                return res.end();

            });//writefile

           /* /!*fs.writeFileSync('message.txt','JOY GHANA');*!/
            res.statusCode = 302;
            res.setHeader('Location', '/');
            return res.end();*/
        })
        /*/!*fs.writeFileSync('message.txt','JOY GHANA');*!/
        res.statusCode = 302;
        res.setHeader('Location', '/');
        return res.end();*/
    }
    res.setHeader('content-Type','text/html');
    res.write(`<html>`)
    res.write(`<head><title>My FirstPage</title></head>`)
    res.write(`<body><h1>Hello from my Node.js</h1></body>`)
    res.write(`</html>`)

    res.end();

//process.exit();
});

server.listen(3000);
**********************************************************************************************************************************
MODULE SUMMARY
-------------

How the Web Works
------------------
Client => Request => Server => Response => Client
1. Client which is the browser send a request to the server
2. Server does some magic, reaches out to a database,works with a file
3. Sends back a response (in html or something else to the browser-client), browser displays

Node.js is a part that runs on the server
-It lifecycle is called the EVENT LOOP
-IT RUNS IN A NON-BLOCKING WAY (which means we only register a bunch of callbacks and events) and node.js will eeventually trigger that code
 once a certain task is done.
 -So JS threat is always free to handle new events, new incoming requests.
 -Node.js can exit if there is no work to do but on a server this shouldnt happen
   Because (create server) registers an event listener for an event which is never done, if a new event is triggered.
   So if a new request is received this does not mean that node unregisters an event listener.
 -This involves a lot of asynchronous code which we saw with all the callbacks.
 -the JS code should not be non-blocking ,so we this callback and event driven approach where we are able to register some code to be executed
  in the future instead of running away and blocking the main threat because this has to be avoided.

REQUEST & RESPONSES
-------------------
- We parse the request data which arrives in chunks and that can use this concept of streams and buffers
   which is explained that we should avoid sending double responses so that rest end, you must not send another response.

Node.js & Core Modules
-------------------
- Node.js ships with multiple core modules (http,fs,path..)
-Core modules can be imported into any files to be used there
-Import via require ('module')

THE NODE JS SYSTEM
---------------
-Import via require('./path-to-file') for custom files or require('module') for core and third party module
- Export via module.exports (for multiple exports)
-