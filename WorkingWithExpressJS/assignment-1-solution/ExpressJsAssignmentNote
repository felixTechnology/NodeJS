1.Let start by creating a new project folder, and give it name
2. In IDE terminal navigate to the project folder
3. Create the (npm) project by typing
   - npm init
   -You will be asked some questions
   . Project Name: (assignment), click enter
   . version, leave it and press enter
   . description: , you can give it short description
   . entry point: (index.js), leave it and press enter
   . test command: , leave it and press enter
   . git respository , leave it and press enter
   . keywords: , leave it and press enter
   . authors: , you can enter your name
   . licence: (ISC): , leave it and press enter
   Is it OK >(ys), just press enter

When you are done you get (package.json) file

4. Now you can install (express.js), we need that to utilise (npm) project to install packages
- enter, npm install --save express
   NOTE: This will install it as production dependency
5. We need to install (nodemon) , this is optional though but because i dont want to be restarting server manually i will adopt this
- enter, npm install --save-dev nodemon

6. Add a script in your package.json file to use (nodemon)
 -so at the script section add, 'start': 'nodemon app.js'

 7. create the, app.js

 8.Now let us write express code in the, app.js file
 - create a new constant and name it (express)
  const express = require('express'); //the express in require is imported.If publishing such a packages make sure you dont clash with such modules
                                       names

   -create the (app) object by calling (express) as a function
     const app = express();

   - let us call (app) listen with port 3000, to bring up our server. You can use any server port of your choice
       app.listen(3000)

   - After the creating (app) object and before doing the listening , let us add our middleware

    app.use((req,res, next) => {
       console.log('First Middleware');
       next();

    })

     app.use((req,res, next) => {
          console.log('Second middleware')
          res.send('<p>Assignment Solved (Almost)</p>'

        })

    Note: with the use function, we can listen to (/) and other things but we will only pass our request, response, next function (req,res,next)
          ;next; function is important when we want to use more than one middleware

*****************************************************************************************************************************************

TASK NO3:
---------
1. Will add two middleware function and add a filter our request to (/) and to users (/users)

 const app = express();


 app.use(('/users',req,res, next) => {// this is not a filter bcos we need exact match /users
        console.log('/users middleware');
        res.send('<p>The Middleware that handles just /users</p>');

     })
      app.listens(3000)


app.use(('/',req,res, next) => {
       console.log('/middleware');
       res.send('<p>The Middleware that handles just /</p>');

    })

